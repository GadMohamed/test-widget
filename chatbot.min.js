// Chatbot Widget Implementation
(function() {
  // Default configuration as fallback
  const DEFAULT_CONFIG = {
    position: 'bottom-right',
    primaryColor: '#4F46E5',
    title: 'Chat with us',
    greeting: 'Hello! How can I help you today?',
    placeholder: 'Type your message...'
  };

  class ChatbotWidget {
    constructor() {
      this.isOpen = false;
      this.messages = [];
      this.initialized = false;
    }

    async init(key) {
      if (!key) {
        console.error('Chatbot: API key is required');
        return;
      }

      try {
        // Fetch configuration from API using the key
        const response = await fetch(`https://api.your-domain.com/config?key=${encodeURIComponent(key)}`);
        if (!response.ok) {
          throw new Error('Failed to fetch configuration');
        }
        
        const apiConfig = await response.json();
        this.config = { ...DEFAULT_CONFIG, ...apiConfig };
        
        // Initialize the widget after getting configuration
        this.createStyles();
        this.createWidget();
        this.attachEventListeners();
        this.initialized = true;
      } catch (error) {
        console.error('Chatbot: Failed to initialize -', error);
        // Fallback to default config if API fails
        this.config = DEFAULT_CONFIG;
        this.createStyles();
        this.createWidget();
        this.attachEventListeners();
        this.initialized = true;
      }
    }

    createStyles() {
      const styles = `
        .chatbot-widget {
          position: fixed;
          z-index: 9999;
          font-family: system-ui, -apple-system, sans-serif;
        }
        .chatbot-widget.bottom-right {
          bottom: 20px;
          right: 20px;
        }
        .chatbot-widget.bottom-left {
          bottom: 20px;
          left: 20px;
        }
        .chatbot-toggle {
          width: 60px;
          height: 60px;
          border-radius: 50%;
          background-color: ${this.config.primaryColor};
          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          cursor: pointer;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: transform 0.3s ease;
        }
        .chatbot-toggle:hover {
          transform: scale(1.1);
        }
        .chatbot-toggle svg {
          width: 28px;
          height: 28px;
          color: white;
        }
        .chatbot-window {
          position: fixed;
          bottom: 100px;
          right: 20px;
          width: 380px;
          height: 500px;
          background: white;
          border-radius: 12px;
          box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
          display: none;
          flex-direction: column;
          overflow: hidden;
        }
        .chatbot-window.open {
          display: flex;
        }
        .chatbot-header {
          padding: 16px;
          background-color: ${this.config.primaryColor};
          color: white;
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .chatbot-close {
          cursor: pointer;
          padding: 4px;
        }
        .chatbot-messages {
          flex: 1;
          overflow-y: auto;
          padding: 16px;
        }
        .message {
          margin-bottom: 12px;
          max-width: 80%;
          padding: 12px;
          border-radius: 12px;
          line-height: 1.4;
        }
        .message.bot {
          background-color: #f3f4f6;
          margin-right: auto;
        }
        .message.user {
          background-color: ${this.config.primaryColor};
          color: white;
          margin-left: auto;
        }
        .chatbot-input {
          padding: 16px;
          border-top: 1px solid #e5e7eb;
          display: flex;
          gap: 8px;
        }
        .chatbot-input input {
          flex: 1;
          padding: 8px 12px;
          border: 1px solid #e5e7eb;
          border-radius: 6px;
          outline: none;
        }
        .chatbot-input input:focus {
          border-color: ${this.config.primaryColor};
        }
        .chatbot-input button {
          padding: 8px 16px;
          background-color: ${this.config.primaryColor};
          color: white;
          border: none;
          border-radius: 6px;
          cursor: pointer;
          transition: opacity 0.3s ease;
        }
        .chatbot-input button:hover {
          opacity: 0.9;
        }
        @media (max-width: 480px) {
          .chatbot-window {
            width: calc(100% - 40px);
            height: calc(100% - 120px);
          }
        }
      `;

      const styleSheet = document.createElement('style');
      styleSheet.textContent = styles;
      document.head.appendChild(styleSheet);
    }

    createWidget() {
      this.widget = document.createElement('div');
      this.widget.className = `chatbot-widget ${this.config.position}`;
      this.widget.innerHTML = `
        <div class="chatbot-toggle">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
          </svg>
        </div>
        <div class="chatbot-window">
          <div class="chatbot-header">
            <h3>${this.config.title}</h3>
            <div class="chatbot-close">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </div>
          </div>
          <div class="chatbot-messages"></div>
          <div class="chatbot-input">
            <input type="text" placeholder="${this.config.placeholder}">
            <button>Send</button>
          </div>
        </div>
      `;

      document.body.appendChild(this.widget);
      
      // Add initial greeting
      this.addMessage(this.config.greeting, 'bot');
    }

    attachEventListeners() {
      const toggle = this.widget.querySelector('.chatbot-toggle');
      const close = this.widget.querySelector('.chatbot-close');
      const input = this.widget.querySelector('input');
      const sendButton = this.widget.querySelector('button');

      toggle.addEventListener('click', () => this.toggleChat());
      close.addEventListener('click', () => this.toggleChat());

      const sendMessage = () => {
        const message = input.value.trim();
        if (message) {
          this.addMessage(message, 'user');
          input.value = '';
          // Simulate bot response
          setTimeout(() => {
            this.addMessage('Thank you for your message! This is a demo response.', 'bot');
          }, 1000);
        }
      };

      sendButton.addEventListener('click', sendMessage);
      input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });
    }

    toggleChat() {
      this.isOpen = !this.isOpen;
      const window = this.widget.querySelector('.chatbot-window');
      window.classList.toggle('open');
    }

    addMessage(text, sender) {
      const messages = this.widget.querySelector('.chatbot-messages');
      const message = document.createElement('div');
      message.className = `message ${sender}`;
      message.textContent = text;
      messages.appendChild(message);
      messages.scrollTop = messages.scrollHeight;
    }
  }

  // Initialize the widget when the script loads
  const initChatbot = () => {
    const script = document.currentScript;
    const key = script.src.split('key=')[1]?.split('&')[0];
    
    if (!key) {
      console.error('Chatbot: API key is required in the script src');
      return;
    }

    const chatbot = new ChatbotWidget();
    chatbot.init(key);
    
    // Expose to window for external access if needed
    window.ChatbotWidget = chatbot;
  };

  // Run initialization
  initChatbot();
})();
